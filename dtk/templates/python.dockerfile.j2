# Python Runtime Template
# Handles both source compilation (3.10+) and package installation (3.6)
{% if python_config.compilation_method == "source" %}
FROM jgwill/ubuntu:{{ os_version }}
{% else %}
FROM jgwill/ubuntu:{{ python_config.base_os }}
{% endif %}

ARG PY_VER
ARG PY_VER_BASE
ARG TZ_NAME="{{ build_config.timezone }}"

ENV DEBIAN_FRONTEND=noninteractive

{% if python_config.compilation_method == "source" %}
# Source compilation method (Python 3.10+)
# Install build essential and dependencies
RUN \
    --mount=type=cache,target=/var/cache/apt \
 	DEBIAN_FRONTEND=noninteractive apt update && apt install -y build-essential  \
 		zlib1g-dev \
 		libncurses5-dev libgdbm-dev libnss3-dev libssl-dev \
 		libreadline-dev libffi-dev  \ 
         	libsqlite3-dev libbz2-dev  liblzma-dev lzma make \
 		gfortran libopenblas-dev liblapack-dev pkg-config libboost-all-dev \
 		unixodbc-dev cmake  python3-urllib3 python3-requests ssh-import-id  libc6-dbg \
 		gcc g++ liblzma-dev lzma

WORKDIR /tmpcache

# Compile Python from source with cache
RUN \
    --mount=type=cache,target=/tmpcache \
	if [ ! -e  "Python-${PY_VER}" ] ;then wget https://www.python.org/ftp/python/${PY_VER}/Python-${PY_VER}.tgz && tar -xf Python-${PY_VER}.tgz \
	&& cd Python-${PY_VER} && ./configure --enable-optimizations && \
	make -j 8 && make altinstall; \
	else \
		cd Python-${PY_VER} && make altinstall ;fi && \ 
	echo rm -rf Python-${PY_VER} && echo Python-${PY_VER}.tgz 

# Set up alternatives
RUN update-alternatives --install /usr/bin/python python /usr/local/bin/python${PY_VER_BASE} 1
RUN update-alternatives --install /usr/bin/pip pip /usr/local/bin/pip${PY_VER_BASE} 1

{% else %}
# Package installation method (Python 3.6)
# Install build essential and Python 3.6 (available in Ubuntu 18.04)
RUN \
    --mount=type=cache,target=/var/cache/apt \
 	DEBIAN_FRONTEND=noninteractive apt update && apt install -y \
 		software-properties-common \
 		build-essential \
 		zlib1g-dev \
 		libncurses5-dev libgdbm-dev libnss3-dev libssl-dev \
 		libreadline-dev libffi-dev \
        libsqlite3-dev libbz2-dev liblzma-dev lzma make \
 		gfortran libopenblas-dev liblapack-dev pkg-config libboost-all-dev \
 		unixodbc-dev cmake python3-urllib3 python3-requests ssh-import-id libc6-dbg \
 		gcc g++ wget curl \
		python${PY_VER_BASE} python${PY_VER_BASE}-dev python3-distutils && \
	rm -rf /var/lib/apt/lists/*

# Install pip for Python 3.6 using get-pip.py
RUN \
    --mount=type=cache,target=/root/.cache \
	wget https://bootstrap.pypa.io/pip/3.6/get-pip.py -O get-pip.py && \
	python${PY_VER_BASE} get-pip.py && \
	rm get-pip.py

# Create symbolic links for python and pip
RUN ln -sf /usr/bin/python${PY_VER_BASE} /usr/local/bin/python3 && \
  ln -sf /usr/bin/python${PY_VER_BASE} /usr/local/bin/python && \
  ln -sf /usr/local/bin/pip${PY_VER_BASE} /usr/local/bin/pip && \
  ln -sf /usr/local/bin/pip${PY_VER_BASE} /usr/local/bin/pip3
{% endif %}

WORKDIR /

# Set timezone
RUN rm -rf /etc/localtime && ln -s /usr/share/zoneinfo/${TZ_NAME} /etc/localtime

# Install Python packages
RUN \
--mount=type=cache,target=/root/.cache \
{% if python_config.compilation_method == "source" %}
	pip install --upgrade pip && \
	pip install  gyp-next
{% else %}
	/usr/local/bin/pip${PY_VER_BASE} install --upgrade pip && \
	/usr/local/bin/pip${PY_VER_BASE} install gyp-next
{% endif %}

USER root
WORKDIR /work